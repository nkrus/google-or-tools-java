// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ortools/constraint_solver/routing_parameters.proto

package com.google.ortools.constraintsolver;

public interface RoutingSearchParametersOrBuilder extends
    // @@protoc_insertion_point(interface_extends:operations_research.RoutingSearchParameters)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * First solution strategies, used as starting point of local search.
   * </pre>
   *
   * <code>.operations_research.FirstSolutionStrategy.Value first_solution_strategy = 1;</code>
   */
  int getFirstSolutionStrategyValue();
  /**
   * <pre>
   * First solution strategies, used as starting point of local search.
   * </pre>
   *
   * <code>.operations_research.FirstSolutionStrategy.Value first_solution_strategy = 1;</code>
   */
  com.google.ortools.constraintsolver.FirstSolutionStrategy.Value getFirstSolutionStrategy();

  /**
   * <pre>
   * --- Advanced first solutions strategy settings ---
   * Don't touch these unless you know what you are doing.
   * Use filtered version of first solution strategy if available.
   * </pre>
   *
   * <code>bool use_unfiltered_first_solution_strategy = 2;</code>
   */
  boolean getUseUnfilteredFirstSolutionStrategy();

  /**
   * <pre>
   * Parameters specific to the Savings first solution heuristic.
   * Ratio (in ]0, 1]) of neighbors to consider for each node when constructing
   * the savings. If unspecified, its value is considered to be 1.0.
   * </pre>
   *
   * <code>double savings_neighbors_ratio = 14;</code>
   */
  double getSavingsNeighborsRatio();

  /**
   * <pre>
   * The number of neighbors considered for each node in the Savings heuristic
   * is chosen so that the space used to store the savings doesn't exceed
   * savings_max_memory_usage_bytes, which must be in ]0, 1e10].
   * NOTE: If both savings_neighbors_ratio and savings_max_memory_usage_bytes
   * are specified, the number of neighbors considered for each node will be the
   * minimum of the two numbers determined by these parameters.
   * </pre>
   *
   * <code>double savings_max_memory_usage_bytes = 23;</code>
   */
  double getSavingsMaxMemoryUsageBytes();

  /**
   * <pre>
   * Add savings related to reverse arcs when finding the nearest neighbors
   * of the nodes.
   * </pre>
   *
   * <code>bool savings_add_reverse_arcs = 15;</code>
   */
  boolean getSavingsAddReverseArcs();

  /**
   * <pre>
   * Coefficient of the cost of the arc for which the saving value is being
   * computed:
   * Saving(a--&gt;b) = Cost(a--&gt;end) + Cost(start--&gt;b)
   *                 - savings_arc_coefficient * Cost(a--&gt;b)
   * This parameter must be greater than 0, and its default value is 1.
   * </pre>
   *
   * <code>double savings_arc_coefficient = 18;</code>
   */
  double getSavingsArcCoefficient();

  /**
   * <pre>
   * When true, the routes are built in parallel, sequentially otherwise.
   * </pre>
   *
   * <code>bool savings_parallel_routes = 19;</code>
   */
  boolean getSavingsParallelRoutes();

  /**
   * <pre>
   * Ratio (between 0 and 1) of available vehicles in the model on which
   * farthest nodes of the model are inserted as seeds in the
   * GlobalCheapestInsertion first solution heuristic.
   * </pre>
   *
   * <code>double cheapest_insertion_farthest_seeds_ratio = 16;</code>
   */
  double getCheapestInsertionFarthestSeedsRatio();

  /**
   * <pre>
   * Ratio (in ]0, 1]) of neighbors to consider for each node when creating
   * new insertions in the parallel/sequential cheapest insertion heuristic.
   * If not overridden, its default value is 1, meaning all neighbors will be
   * considered.
   * </pre>
   *
   * <code>double cheapest_insertion_neighbors_ratio = 21;</code>
   */
  double getCheapestInsertionNeighborsRatio();

  /**
   * <code>.operations_research.RoutingSearchParameters.LocalSearchNeighborhoodOperators local_search_operators = 3;</code>
   */
  boolean hasLocalSearchOperators();
  /**
   * <code>.operations_research.RoutingSearchParameters.LocalSearchNeighborhoodOperators local_search_operators = 3;</code>
   */
  com.google.ortools.constraintsolver.RoutingSearchParameters.LocalSearchNeighborhoodOperators getLocalSearchOperators();
  /**
   * <code>.operations_research.RoutingSearchParameters.LocalSearchNeighborhoodOperators local_search_operators = 3;</code>
   */
  com.google.ortools.constraintsolver.RoutingSearchParameters.LocalSearchNeighborhoodOperatorsOrBuilder getLocalSearchOperatorsOrBuilder();

  /**
   * <pre>
   * Number of expensive arcs to consider cutting in the RelocateExpensiveChain
   * neighborhood operator (see
   * LocalSearchNeighborhoodOperators.use_relocate_expensive_chain()).
   * This parameter must be greater than 2.
   * NOTE(user): The number of neighbors generated by the operator for
   * relocate_expensive_chain_num_arcs_to_consider = K is around
   * K*(K-1)/2 * number_of_routes * number_of_nodes.
   * </pre>
   *
   * <code>int32 relocate_expensive_chain_num_arcs_to_consider = 20;</code>
   */
  int getRelocateExpensiveChainNumArcsToConsider();

  /**
   * <pre>
   * Local search metaheuristics used to guide the search.
   * </pre>
   *
   * <code>.operations_research.LocalSearchMetaheuristic.Value local_search_metaheuristic = 4;</code>
   */
  int getLocalSearchMetaheuristicValue();
  /**
   * <pre>
   * Local search metaheuristics used to guide the search.
   * </pre>
   *
   * <code>.operations_research.LocalSearchMetaheuristic.Value local_search_metaheuristic = 4;</code>
   */
  com.google.ortools.constraintsolver.LocalSearchMetaheuristic.Value getLocalSearchMetaheuristic();

  /**
   * <pre>
   * These are advanced settings which should not be modified unless you know
   * what you are doing.
   * Lambda coefficient used to penalize arc costs when GUIDED_LOCAL_SEARCH is
   * used. Must be positive.
   * </pre>
   *
   * <code>double guided_local_search_lambda_coefficient = 5;</code>
   */
  double getGuidedLocalSearchLambdaCoefficient();

  /**
   * <pre>
   * --- Search control ---
   * If true, the solver should use depth-first search rather than local search
   * to solve the problem.
   * </pre>
   *
   * <code>bool use_depth_first_search = 6;</code>
   */
  boolean getUseDepthFirstSearch();

  /**
   * <pre>
   * Minimum step by which the solution must be improved in local search. 0
   * means "unspecified". If this value is fractional, it will get rounded to
   * the nearest integer.
   * </pre>
   *
   * <code>double optimization_step = 7;</code>
   */
  double getOptimizationStep();

  /**
   * <pre>
   * Number of solutions to collect during the search. Corresponds to the best
   * solutions found during the search. 0 means "unspecified".
   * </pre>
   *
   * <code>int32 number_of_solutions_to_collect = 17;</code>
   */
  int getNumberOfSolutionsToCollect();

  /**
   * <pre>
   * -- Search limits --
   * Limit to the number of solutions generated during the search. 0 means
   * "unspecified".
   * </pre>
   *
   * <code>int64 solution_limit = 8;</code>
   */
  long getSolutionLimit();

  /**
   * <pre>
   * Limit to the time spent in the search.
   * </pre>
   *
   * <code>.google.protobuf.Duration time_limit = 9;</code>
   */
  boolean hasTimeLimit();
  /**
   * <pre>
   * Limit to the time spent in the search.
   * </pre>
   *
   * <code>.google.protobuf.Duration time_limit = 9;</code>
   */
  com.google.protobuf.Duration getTimeLimit();
  /**
   * <pre>
   * Limit to the time spent in the search.
   * </pre>
   *
   * <code>.google.protobuf.Duration time_limit = 9;</code>
   */
  com.google.protobuf.DurationOrBuilder getTimeLimitOrBuilder();

  /**
   * <pre>
   * Limit to the time spent in the completion search for each local search
   * neighbor.
   * </pre>
   *
   * <code>.google.protobuf.Duration lns_time_limit = 10;</code>
   */
  boolean hasLnsTimeLimit();
  /**
   * <pre>
   * Limit to the time spent in the completion search for each local search
   * neighbor.
   * </pre>
   *
   * <code>.google.protobuf.Duration lns_time_limit = 10;</code>
   */
  com.google.protobuf.Duration getLnsTimeLimit();
  /**
   * <pre>
   * Limit to the time spent in the completion search for each local search
   * neighbor.
   * </pre>
   *
   * <code>.google.protobuf.Duration lns_time_limit = 10;</code>
   */
  com.google.protobuf.DurationOrBuilder getLnsTimeLimitOrBuilder();

  /**
   * <pre>
   * --- Propagation control ---
   * These are advanced settings which should not be modified unless you know
   * what you are doing.
   * Use constraints with full propagation in routing model (instead of 'light'
   * propagation only). Full propagation is only necessary when using
   * depth-first search or for models which require strong propagation to
   * finalize the value of secondary variables.
   * Changing this setting to true will slow down the search in most cases and
   * increase memory consumption in all cases.
   * </pre>
   *
   * <code>bool use_full_propagation = 11;</code>
   */
  boolean getUseFullPropagation();

  /**
   * <pre>
   * --- Miscellaneous ---
   * Some of these are advanced settings which should not be modified unless you
   * know what you are doing.
   * Activates search logging. For each solution found during the search, the
   * following will be displayed: its objective value, the maximum objective
   * value since the beginning of the search, the elapsed time since the
   * beginning of the search, the number of branches explored in the search
   * tree, the number of failures in the search tree, the depth of the search
   * tree, the number of local search neighbors explored, the number of local
   * search neighbors filtered by local search filters, the number of local
   * search neighbors accepted, the total memory used and the percentage of the
   * search done.
   * </pre>
   *
   * <code>bool log_search = 13;</code>
   */
  boolean getLogSearch();

  /**
   * <pre>
   * In logs, cost values will be unscaled by this factor.
   * </pre>
   *
   * <code>double log_cost_scaling_factor = 22;</code>
   */
  double getLogCostScalingFactor();
}
